{
  "sksl": {
    "entrypoint": "liquid_glass_arbitrary_fragment_main",
    "shader": "// This SkSL shader is autogenerated by spirv-cross.\n\nfloat4 flutter_FragCoord;\n\nuniform vec2 uSize;\nuniform vec2 uForegroundSize;\nuniform vec4 uGlassColor;\nuniform vec4 uOpticalProps;\nuniform vec4 uLightConfig;\nuniform vec2 uTransformData;\nuniform vec2 uLightDirection;\nuniform mat4 uTransform;\nuniform shader uBackgroundTexture;\nuniform half2 uBackgroundTexture_size;\nuniform shader uForegroundTexture;\nuniform half2 uForegroundTexture_size;\nuniform shader uForegroundBlurredTexture;\nuniform half2 uForegroundBlurredTexture_size;\n\nvec4 fragColor;\n\nfloat uChromaticAberration;\nfloat uLightAngle;\nfloat uLightIntensity;\nfloat uAmbientStrength;\nfloat uThickness;\nfloat uRefractiveIndex;\nvec2 uOffset;\nfloat uSaturation;\nfloat uGaussianBlur;\n\nvec2 FLT_flutter_local_FlutterFragCoord()\n{\n    return flutter_FragCoord.xy;\n}\n\nfloat FLT_flutter_local_computeY(float coordY, vec2 size)\n{\n    return coordY / size.y;\n}\n\nfloat FLT_flutter_local_approximateSDF(float blurredAlpha, float thickness)\n{\n    float normalizedDistance = smoothstep(0.0, 1.0, blurredAlpha);\n    return (-normalizedDistance) * thickness;\n}\n\nvec2 FLT_flutter_local_findShapeCenter(vec2 currentUV)\n{\n    vec2 texelSize = vec2(2.0) / uForegroundSize;\n    vec2 centerSum = vec2(0.0);\n    float totalAlpha = 0.0;\n    int sampleRadius = 10;\n    int _692 = -sampleRadius;\n    for (int y = _692; y <= sampleRadius; y++)\n    {\n        int _703 = -sampleRadius;\n        for (int x = _703; x <= sampleRadius; x++)\n        {\n            vec2 sampleUV = currentUV + (vec2(float(x), float(y)) * texelSize);\n            bool _724 = sampleUV.x >= 0.0;\n            bool _730;\n            if (_724)\n            {\n                _730 = sampleUV.x <= 1.0;\n            }\n            else\n            {\n                _730 = _724;\n            }\n            bool _736;\n            if (_730)\n            {\n                _736 = sampleUV.y >= 0.0;\n            }\n            else\n            {\n                _736 = _730;\n            }\n            bool _742;\n            if (_736)\n            {\n                _742 = sampleUV.y <= 1.0;\n            }\n            else\n            {\n                _742 = _736;\n            }\n            if (_742)\n            {\n                float alpha = uForegroundTexture.eval(uForegroundTexture_size * ( sampleUV)).w;\n                if (alpha > 0.100000001490116119384765625)\n                {\n                    centerSum += (sampleUV * alpha);\n                    totalAlpha += alpha;\n                }\n            }\n        }\n    }\n    vec2 _771;\n    if (totalAlpha > 0.0)\n    {\n        _771 = centerSum / vec2(totalAlpha);\n    }\n    else\n    {\n        _771 = currentUV;\n    }\n    return _771;\n}\n\nvec3 FLT_flutter_local_getReconstructedNormal(vec2 p, float thickness)\n{\n    vec2 uv = p / uForegroundSize;\n    if (uForegroundTexture.eval(uForegroundTexture_size * ( uv)).w < 0.00999999977648258209228515625)\n    {\n        return vec3(0.0, 0.0, 1.0);\n    }\n    vec2 param = uv;\n    vec2 shapeCenter = FLT_flutter_local_findShapeCenter(param);\n    vec2 centerToPoint = uv - shapeCenter;\n    if (length(centerToPoint) < 0.001000000047497451305389404296875)\n    {\n        return vec3(0.0, 0.0, 1.0);\n    }\n    vec2 outwardDirection = normalize(centerToPoint);\n    float blurredAlpha = uForegroundBlurredTexture.eval(uForegroundBlurredTexture_size * ( uv)).w;\n    float sharpAlpha = uForegroundTexture.eval(uForegroundTexture_size * ( uv)).w;\n    float edgeDistance = smoothstep(0.0, 1.0, blurredAlpha);\n    float normalExponent = 0.20000000298023223876953125;\n    float normalZ = pow(edgeDistance, normalExponent);\n    float xyScale = sqrt(max(0.0, 1.0 - (normalZ * normalZ)));\n    return normalize(vec3(outwardDirection * xyScale, normalZ));\n}\n\nvec3 FLT_flutter_local_getNormal(vec2 p, float thickness)\n{\n    vec2 param = p;\n    float param_1 = thickness;\n    return FLT_flutter_local_getReconstructedNormal(param, param_1);\n}\n\nfloat FLT_flutter_local_getHeight(float sd, float thickness)\n{\n    if ((sd >= 0.0) || (thickness <= 0.0))\n    {\n        return 0.0;\n    }\n    if (sd < (-thickness))\n    {\n        return thickness;\n    }\n    float x = thickness + sd;\n    return sqrt(max(0.0, (thickness * thickness) - (x * x)));\n}\n\nvec4 FLT_flutter_local_calculateRefraction(vec2 screenUV, vec3 normal, float height, float thickness, float refractiveIndex, float chromaticAberration, vec2 uSize_1, shader backgroundTexture, float blurRadius, out vec2 refractionDisplacement)\n{\n    float baseHeight = thickness * 8.0;\n    vec3 incident = vec3(0.0, 0.0, -1.0);\n    float invRefractiveIndex = 1.0 / refractiveIndex;\n    vec2 invUSize = vec2(1.0) / uSize_1;\n    vec3 baseRefract = refract(incident, normal, invRefractiveIndex);\n    float baseRefractLength = (height + baseHeight) / max(0.001000000047497451305389404296875, abs(baseRefract.z));\n    vec2 baseDisplacement = baseRefract.xy * baseRefractLength;\n    refractionDisplacement = baseDisplacement;\n    if (chromaticAberration < 0.001000000047497451305389404296875)\n    {\n        vec2 refractedUV = screenUV + (baseDisplacement * invUSize);\n        return backgroundTexture.eval(backgroundTexture_size * ( refractedUV));\n    }\n    float dispersionStrength = chromaticAberration * 0.5;\n    vec2 redOffset = baseDisplacement * (1.0 + dispersionStrength);\n    vec2 blueOffset = baseDisplacement * (1.0 - dispersionStrength);\n    vec2 redUV = screenUV + (redOffset * invUSize);\n    vec2 greenUV = screenUV + (baseDisplacement * invUSize);\n    vec2 blueUV = screenUV + (blueOffset * invUSize);\n    float red = backgroundTexture.eval(backgroundTexture_size * ( redUV)).x;\n    vec4 greenSample = backgroundTexture.eval(backgroundTexture_size * ( greenUV));\n    float blue = backgroundTexture.eval(backgroundTexture_size * ( blueUV)).z;\n    return vec4(red, greenSample.y, blue, greenSample.w);\n}\n\nvec3 FLT_flutter_local_getHighlightColor(vec3 backgroundColor, float targetBrightness)\n{\n    float luminance = dot(backgroundColor, vec3(0.2989999949932098388671875, 0.58700001239776611328125, 0.114000000059604644775390625));\n    float maxComponent = max(max(backgroundColor.x, backgroundColor.y), backgroundColor.z);\n    float minComponent = min(min(backgroundColor.x, backgroundColor.y), backgroundColor.z);\n    float _189;\n    if (maxComponent > 0.0)\n    {\n        _189 = (maxComponent - minComponent) / maxComponent;\n    }\n    else\n    {\n        _189 = 0.0;\n    }\n    float saturation = _189;\n    vec3 coloredHighlight = vec3(targetBrightness);\n    if (luminance > 0.001000000047497451305389404296875)\n    {\n        vec3 normalizedBackground = backgroundColor / vec3(luminance);\n        coloredHighlight = normalizedBackground * targetBrightness;\n        float saturationBoost = 1.2999999523162841796875;\n        vec3 gray = vec3(dot(coloredHighlight, vec3(0.2989999949932098388671875, 0.58700001239776611328125, 0.114000000059604644775390625)));\n        coloredHighlight = mix(gray, coloredHighlight, vec3(saturationBoost));\n        coloredHighlight = min(coloredHighlight, vec3(1.0));\n    }\n    float luminanceFactor = smoothstep(0.0, 0.60000002384185791015625, luminance);\n    float saturationFactor = smoothstep(0.0, 0.4000000059604644775390625, saturation);\n    float colorInfluence = luminanceFactor * saturationFactor;\n    vec3 whiteHighlight = vec3(targetBrightness);\n    return mix(whiteHighlight, coloredHighlight, vec3(colorInfluence));\n}\n\nvec3 FLT_flutter_local_calculateLighting(vec2 uv, vec3 normal, float sd, float thickness, float height, vec2 lightDirection, float lightIntensity, float ambientStrength, vec3 backgroundColor)\n{\n    float _286;\n    if (thickness > 0.0)\n    {\n        _286 = height / thickness;\n    }\n    else\n    {\n        _286 = 0.0;\n    }\n    float normalizedHeight = _286;\n    float shape = clamp((1.0 - normalizedHeight) * 1.11099994182586669921875, 0.0, 1.0);\n    if (shape < 0.00999999977648258209228515625)\n    {\n        return vec3(0.0);\n    }\n    float thicknessFactor = clamp((thickness - 5.0) * 0.5, 0.0, 1.0);\n    if (thicknessFactor < 0.00999999977648258209228515625)\n    {\n        return vec3(0.0);\n    }\n    float rimWidth = 1.5;\n    float k = 0.88999998569488525390625;\n    float x = sd / rimWidth;\n    float rimFactor = 1.0 / (1.0 + ((k * x) * x));\n    if ((rimFactor < 0.00999999977648258209228515625) || (lightIntensity < 0.00999999977648258209228515625))\n    {\n        return vec3(0.0);\n    }\n    vec2 normalXY = normal.xy;\n    float mainLightInfluence = max(0.0, dot(normalXY, lightDirection));\n    float oppositeLightInfluence = max(0.0, dot(normalXY, -lightDirection));\n    float totalInfluence = mainLightInfluence + (oppositeLightInfluence * 0.800000011920928955078125);\n    vec3 param = backgroundColor;\n    float param_1 = 1.0;\n    vec3 highlightColor = FLT_flutter_local_getHighlightColor(param, param_1);\n    vec3 directionalRim = (((highlightColor * 0.699999988079071044921875) * (totalInfluence * totalInfluence)) * lightIntensity) * 2.0;\n    vec3 ambientRim = (highlightColor * 0.4000000059604644775390625) * ambientStrength;\n    vec3 totalRimLight = (directionalRim + ambientRim) * rimFactor;\n    return (totalRimLight * thicknessFactor) * shape;\n}\n\nvec4 FLT_flutter_local_applyGlassColor(vec4 liquidColor, vec4 glassColor)\n{\n    vec4 finalColor = liquidColor;\n    if (glassColor.w > 0.0)\n    {\n        float glassLuminance = dot(glassColor.xyz, vec3(0.2989999949932098388671875, 0.58700001239776611328125, 0.114000000059604644775390625));\n        if (glassLuminance < 0.5)\n        {\n            vec3 darkened = liquidColor.xyz * (glassColor.xyz * 2.0);\n            vec3 _544 = mix(liquidColor.xyz, darkened, vec3(glassColor.w));\n            finalColor.x = _544.x;\n            finalColor.y = _544.y;\n            finalColor.z = _544.z;\n        }\n        else\n        {\n            vec3 invLiquid = vec3(1.0) - liquidColor.xyz;\n            vec3 invGlass = vec3(1.0) - glassColor.xyz;\n            vec3 screened = vec3(1.0) - (invLiquid * invGlass);\n            vec3 _571 = mix(liquidColor.xyz, screened, vec3(glassColor.w));\n            finalColor.x = _571.x;\n            finalColor.y = _571.y;\n            finalColor.z = _571.z;\n        }\n        finalColor.w = liquidColor.w;\n    }\n    return finalColor;\n}\n\nvec3 FLT_flutter_local_applySaturation(vec3 color, float saturation)\n{\n    float luminance = dot(color, vec3(0.2989999949932098388671875, 0.58700001239776611328125, 0.114000000059604644775390625));\n    vec3 saturatedColor = mix(vec3(luminance), color, vec3(saturation));\n    return clamp(saturatedColor, vec3(0.0), vec3(1.0));\n}\n\nvec4 FLT_flutter_local_renderLiquidGlass(vec2 screenUV, vec2 p, vec2 uSize_1, float sd, float thickness, float refractiveIndex, float chromaticAberration, vec4 glassColor, vec2 lightDirection, float lightIntensity, float ambientStrength, shader backgroundTexture, vec3 normal, float foregroundAlpha, float gaussianBlur, float saturation)\n{\n    float param = sd;\n    float param_1 = thickness;\n    float height = FLT_flutter_local_getHeight(param, param_1);\n    vec2 param_2 = screenUV;\n    vec3 param_3 = normal;\n    float param_4 = height;\n    float param_5 = thickness;\n    float param_6 = refractiveIndex;\n    float param_7 = chromaticAberration;\n    vec2 param_8 = uSize_1;\n    float param_9 = gaussianBlur;\n    vec2 param_10;\n    vec4 _609 = FLT_flutter_local_calculateRefraction(param_2, param_3, param_4, param_5, param_6, param_7, param_8, backgroundTexture, param_9, param_10);\n    vec2 refractionDisplacement = param_10;\n    vec4 refractColor = _609;\n    vec3 backgroundColor = refractColor.xyz;\n    vec2 param_11 = screenUV;\n    vec3 param_12 = normal;\n    float param_13 = sd;\n    float param_14 = thickness;\n    float param_15 = height;\n    vec2 param_16 = lightDirection;\n    float param_17 = lightIntensity;\n    float param_18 = ambientStrength;\n    vec3 param_19 = backgroundColor;\n    vec3 lighting = FLT_flutter_local_calculateLighting(param_11, param_12, param_13, param_14, param_15, param_16, param_17, param_18, param_19);\n    vec4 param_20 = refractColor;\n    vec4 param_21 = glassColor;\n    vec4 finalColor = FLT_flutter_local_applyGlassColor(param_20, param_21);\n    vec4 _641 = finalColor;\n    vec3 _643 = _641.xyz + lighting;\n    finalColor.x = _643.x;\n    finalColor.y = _643.y;\n    finalColor.z = _643.z;\n    vec3 param_22 = finalColor.xyz;\n    float param_23 = saturation;\n    vec3 _655 = FLT_flutter_local_applySaturation(param_22, param_23);\n    finalColor.x = _655.x;\n    finalColor.y = _655.y;\n    finalColor.z = _655.z;\n    return mix(vec4(0.0), finalColor, vec4(foregroundAlpha));\n}\n\nvoid FLT_main()\n{\n    uChromaticAberration = uOpticalProps.y;\n    uLightAngle = uLightConfig.x;\n    uLightIntensity = uLightConfig.y;\n    uAmbientStrength = uLightConfig.z;\n    uThickness = uOpticalProps.z;\n    uRefractiveIndex = uOpticalProps.x;\n    uOffset = uTransformData;\n    uSaturation = uLightConfig.w;\n    uGaussianBlur = uOpticalProps.w;\n    vec2 fragCoord = FLT_flutter_local_FlutterFragCoord();\n    float param_24 = fragCoord.y;\n    vec2 param_25 = uSize;\n    float screenY = FLT_flutter_local_computeY(param_24, param_25);\n    vec2 screenUV_1 = vec2(fragCoord.x / uSize.x, screenY);\n    vec2 layerLocalCoord = fragCoord - uOffset;\n    vec4 transformedCoord = uTransform * vec4(layerLocalCoord, 0.0, 1.0);\n    float param_26 = transformedCoord.y;\n    vec2 param_27 = uForegroundSize;\n    float layerY = FLT_flutter_local_computeY(param_26, param_27);\n    vec2 layerUV = vec2(transformedCoord.x / uForegroundSize.x, layerY);\n    bool _906 = layerUV.x < 0.0;\n    bool _913;\n    if (!_906)\n    {\n        _913 = layerUV.x > 1.0;\n    }\n    else\n    {\n        _913 = _906;\n    }\n    bool _920;\n    if (!_913)\n    {\n        _920 = layerUV.y < 0.0;\n    }\n    else\n    {\n        _920 = _913;\n    }\n    bool _927;\n    if (!_920)\n    {\n        _927 = layerUV.y > 1.0;\n    }\n    else\n    {\n        _927 = _920;\n    }\n    if (_927)\n    {\n        fragColor = uBackgroundTexture.eval(uBackgroundTexture_size * ( screenUV_1));\n        return;\n    }\n    vec4 foregroundColor = uForegroundTexture.eval(uForegroundTexture_size * ( layerUV));\n    if (foregroundColor.w < 0.001000000047497451305389404296875)\n    {\n        fragColor = uBackgroundTexture.eval(uBackgroundTexture_size * ( screenUV_1));\n        return;\n    }\n    vec4 blurred = uForegroundBlurredTexture.eval(uForegroundBlurredTexture_size * ( layerUV));\n    float param_28 = blurred.w;\n    float param_29 = uThickness;\n    float sd_1 = FLT_flutter_local_approximateSDF(param_28, param_29);\n    vec2 param_30 = transformedCoord.xy;\n    float param_31 = uThickness;\n    vec3 normal_1 = FLT_flutter_local_getNormal(param_30, param_31);\n    vec2 param_32 = screenUV_1;\n    vec2 param_33 = fragCoord;\n    vec2 param_34 = uSize;\n    float param_35 = sd_1;\n    float param_36 = uThickness;\n    float param_37 = uRefractiveIndex;\n    float param_38 = uChromaticAberration;\n    vec4 param_39 = uGlassColor;\n    vec2 param_40 = uLightDirection;\n    float param_41 = uLightIntensity;\n    float param_42 = uAmbientStrength;\n    vec3 param_43 = normal_1;\n    float param_44 = foregroundColor.w;\n    float param_45 = uGaussianBlur;\n    float param_46 = uSaturation;\n    fragColor = FLT_flutter_local_renderLiquidGlass(param_32, param_33, param_34, param_35, param_36, param_37, param_38, param_39, param_40, param_41, param_42, uBackgroundTexture, param_43, param_44, param_45, param_46);\n}\n\nhalf4 main(float2 iFragCoord)\n{\n      flutter_FragCoord = float4(iFragCoord, 0, 0);\n      FLT_main();\n      return fragColor;\n}\n",
    "stage": 1,
    "uniforms": [
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 0,
        "name": "uSize",
        "rows": 2,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 0,
        "columns": 1,
        "location": 0,
        "name": "uBackgroundTexture",
        "rows": 1,
        "type": 12
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 1,
        "name": "uForegroundSize",
        "rows": 2,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 0,
        "columns": 1,
        "location": 1,
        "name": "uForegroundTexture",
        "rows": 1,
        "type": 12
      },
      {
        "array_elements": 0,
        "bit_width": 0,
        "columns": 1,
        "location": 2,
        "name": "uForegroundBlurredTexture",
        "rows": 1,
        "type": 12
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 2,
        "name": "uGlassColor",
        "rows": 4,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 3,
        "name": "uOpticalProps",
        "rows": 4,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 4,
        "name": "uLightConfig",
        "rows": 4,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 5,
        "name": "uTransformData",
        "rows": 2,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 6,
        "name": "uLightDirection",
        "rows": 2,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 4,
        "location": 7,
        "name": "uTransform",
        "rows": 4,
        "type": 10
      }
    ]
  }
}