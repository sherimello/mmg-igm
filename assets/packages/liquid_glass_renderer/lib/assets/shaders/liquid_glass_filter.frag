{
  "sksl": {
    "entrypoint": "liquid_glass_filter_fragment_main",
    "shader": "// This SkSL shader is autogenerated by spirv-cross.\n\nfloat4 flutter_FragCoord;\n\nuniform vec2 uSize;\nuniform vec4 uGlassColor;\nuniform vec4 uOpticalProps;\nuniform vec4 uLightConfig;\nuniform vec2 uLightDirection;\nuniform float uNumShapes;\nuniform float uShapeData[96];\nuniform shader uBlurredTexture;\nuniform half2 uBlurredTexture_size;\n\nvec4 fragColor;\n\nfloat uChromaticAberration;\nfloat uLightAngle;\nfloat uLightIntensity;\nfloat uAmbientStrength;\nfloat uThickness;\nfloat uRefractiveIndex;\nfloat uBlend;\nfloat uSaturation;\n\nvec2 FLT_flutter_local_FlutterFragCoord()\n{\n    return flutter_FragCoord.xy;\n}\n\nfloat FLT_flutter_local_sdfSquircle(vec2 p, vec2 b, inout float r)\n{\n    float shortest = min(b.x, b.y);\n    r = min(r, shortest);\n    vec2 q = (abs(p) - b) + vec2(r);\n    vec2 maxQ = max(q, vec2(0.0));\n    return (min(max(q.x, q.y), 0.0) + sqrt((maxQ.x * maxQ.x) + (maxQ.y * maxQ.y))) - r;\n}\n\nfloat FLT_flutter_local_sdfEllipse(vec2 p, inout vec2 r)\n{\n    r = max(r, vec2(9.9999997473787516355514526367188e-05));\n    vec2 invR = vec2(1.0) / r;\n    vec2 invR2 = invR * invR;\n    vec2 pInvR = p * invR;\n    float k1 = length(pInvR);\n    vec2 pInvR2 = p * invR2;\n    float k2 = length(pInvR2);\n    return (k1 * (k1 - 1.0)) / max(k2, 9.9999997473787516355514526367188e-05);\n}\n\nfloat FLT_flutter_local_sdfRRect(vec2 p, vec2 b, inout float r)\n{\n    float shortest = min(b.x, b.y);\n    r = min(r, shortest);\n    vec2 q = (abs(p) - b) + vec2(r);\n    return (min(max(q.x, q.y), 0.0) + length(max(q, vec2(0.0)))) - r;\n}\n\nfloat FLT_flutter_local_getShapeSDF(float type, vec2 p, vec2 center, vec2 size, float r)\n{\n    if (type == 1.0)\n    {\n        vec2 param = p - center;\n        vec2 param_1 = size / vec2(2.0);\n        float param_2 = r;\n        float _844 = FLT_flutter_local_sdfSquircle(param, param_1, param_2);\n        return _844;\n    }\n    if (type == 2.0)\n    {\n        vec2 param_3 = p - center;\n        vec2 param_4 = size / vec2(2.0);\n        float _858 = FLT_flutter_local_sdfEllipse(param_3, param_4);\n        return _858;\n    }\n    if (type == 3.0)\n    {\n        vec2 param_5 = p - center;\n        vec2 param_6 = size / vec2(2.0);\n        float param_7 = r;\n        float _875 = FLT_flutter_local_sdfRRect(param_5, param_6, param_7);\n        return _875;\n    }\n    return 1000000000.0;\n}\n\nfloat FLT_flutter_local_getShapeSDFFromArray(int index, vec2 p, float shapeData[96])\n{\n    int baseIndex = index * 6;\n    float type = shapeData[baseIndex];\n    vec2 center = vec2(shapeData[baseIndex + 1], shapeData[baseIndex + 2]);\n    vec2 size = vec2(shapeData[baseIndex + 3], shapeData[baseIndex + 4]);\n    float cornerRadius = shapeData[baseIndex + 5];\n    float param = type;\n    vec2 param_1 = p;\n    vec2 param_2 = center;\n    vec2 param_3 = size;\n    float param_4 = cornerRadius;\n    return FLT_flutter_local_getShapeSDF(param, param_1, param_2, param_3, param_4);\n}\n\nfloat FLT_flutter_local_smoothUnion(float d1, float d2, float k)\n{\n    if (k <= 0.0)\n    {\n        return min(d1, d2);\n    }\n    float e = max(k - abs(d1 - d2), 0.0);\n    return min(d1, d2) - (((e * e) * 0.25) / k);\n}\n\nfloat FLT_flutter_local_sceneSDF(vec2 p, int numShapes, float shapeData[96], float blend)\n{\n    if (numShapes == 0)\n    {\n        return 1000000000.0;\n    }\n    int param = 0;\n    vec2 param_1 = p;\n    float param_2[96] = shapeData;\n    float result = FLT_flutter_local_getShapeSDFFromArray(param, param_1, param_2);\n    if (numShapes <= 4)\n    {\n        if (numShapes >= 2)\n        {\n            int param_3 = 1;\n            vec2 param_4 = p;\n            float param_5[96] = shapeData;\n            float shapeSDF = FLT_flutter_local_getShapeSDFFromArray(param_3, param_4, param_5);\n            float param_6 = result;\n            float param_7 = shapeSDF;\n            float param_8 = blend;\n            result = FLT_flutter_local_smoothUnion(param_6, param_7, param_8);\n        }\n        if (numShapes >= 3)\n        {\n            int param_9 = 2;\n            vec2 param_10 = p;\n            float param_11[96] = shapeData;\n            float shapeSDF_1 = FLT_flutter_local_getShapeSDFFromArray(param_9, param_10, param_11);\n            float param_12 = result;\n            float param_13 = shapeSDF_1;\n            float param_14 = blend;\n            result = FLT_flutter_local_smoothUnion(param_12, param_13, param_14);\n        }\n        if (numShapes >= 4)\n        {\n            int param_15 = 3;\n            vec2 param_16 = p;\n            float param_17[96] = shapeData;\n            float shapeSDF_2 = FLT_flutter_local_getShapeSDFFromArray(param_15, param_16, param_17);\n            float param_18 = result;\n            float param_19 = shapeSDF_2;\n            float param_20 = blend;\n            result = FLT_flutter_local_smoothUnion(param_18, param_19, param_20);\n        }\n    }\n    else\n    {\n        for (int i = 1; i < min(numShapes, 16); i++)\n        {\n            int param_21 = i;\n            vec2 param_22 = p;\n            float param_23[96] = shapeData;\n            float shapeSDF_3 = FLT_flutter_local_getShapeSDFFromArray(param_21, param_22, param_23);\n            float param_24 = result;\n            float param_25 = shapeSDF_3;\n            float param_26 = blend;\n            result = FLT_flutter_local_smoothUnion(param_24, param_25, param_26);\n        }\n    }\n    return result;\n}\n\nvec3 FLT_flutter_local_getNormal(float sd, float thickness)\n{\n    float dx = dFdx(sd);\n    float dy = dFdy(sd);\n    float n_cos = max(thickness + sd, 0.0) / thickness;\n    float n_sin = sqrt(max(0.0, 1.0 - (n_cos * n_cos)));\n    return normalize(vec3(dx * n_cos, dy * n_cos, n_sin));\n}\n\nfloat FLT_flutter_local_getHeight(float sd, float thickness)\n{\n    if ((sd >= 0.0) || (thickness <= 0.0))\n    {\n        return 0.0;\n    }\n    if (sd < (-thickness))\n    {\n        return thickness;\n    }\n    float x = thickness + sd;\n    return sqrt(max(0.0, (thickness * thickness) - (x * x)));\n}\n\nvec4 FLT_flutter_local_calculateRefraction(vec2 screenUV, vec3 normal, float height, float thickness, float refractiveIndex, float chromaticAberration, vec2 uSize_1, shader backgroundTexture, float blurRadius, out vec2 refractionDisplacement)\n{\n    float baseHeight = thickness * 8.0;\n    vec3 incident = vec3(0.0, 0.0, -1.0);\n    float invRefractiveIndex = 1.0 / refractiveIndex;\n    vec2 invUSize = vec2(1.0) / uSize_1;\n    vec3 baseRefract = refract(incident, normal, invRefractiveIndex);\n    float baseRefractLength = (height + baseHeight) / max(0.001000000047497451305389404296875, abs(baseRefract.z));\n    vec2 baseDisplacement = baseRefract.xy * baseRefractLength;\n    refractionDisplacement = baseDisplacement;\n    if (chromaticAberration < 0.001000000047497451305389404296875)\n    {\n        vec2 refractedUV = screenUV + (baseDisplacement * invUSize);\n        return backgroundTexture.eval(backgroundTexture_size * ( refractedUV));\n    }\n    float dispersionStrength = chromaticAberration * 0.5;\n    vec2 redOffset = baseDisplacement * (1.0 + dispersionStrength);\n    vec2 blueOffset = baseDisplacement * (1.0 - dispersionStrength);\n    vec2 redUV = screenUV + (redOffset * invUSize);\n    vec2 greenUV = screenUV + (baseDisplacement * invUSize);\n    vec2 blueUV = screenUV + (blueOffset * invUSize);\n    float red = backgroundTexture.eval(backgroundTexture_size * ( redUV)).x;\n    vec4 greenSample = backgroundTexture.eval(backgroundTexture_size * ( greenUV));\n    float blue = backgroundTexture.eval(backgroundTexture_size * ( blueUV)).z;\n    return vec4(red, greenSample.y, blue, greenSample.w);\n}\n\nvec3 FLT_flutter_local_getHighlightColor(vec3 backgroundColor, float targetBrightness)\n{\n    float luminance = dot(backgroundColor, vec3(0.2989999949932098388671875, 0.58700001239776611328125, 0.114000000059604644775390625));\n    float maxComponent = max(max(backgroundColor.x, backgroundColor.y), backgroundColor.z);\n    float minComponent = min(min(backgroundColor.x, backgroundColor.y), backgroundColor.z);\n    float _210;\n    if (maxComponent > 0.0)\n    {\n        _210 = (maxComponent - minComponent) / maxComponent;\n    }\n    else\n    {\n        _210 = 0.0;\n    }\n    float saturation = _210;\n    vec3 coloredHighlight = vec3(targetBrightness);\n    if (luminance > 0.001000000047497451305389404296875)\n    {\n        vec3 normalizedBackground = backgroundColor / vec3(luminance);\n        coloredHighlight = normalizedBackground * targetBrightness;\n        float saturationBoost = 1.2999999523162841796875;\n        vec3 gray = vec3(dot(coloredHighlight, vec3(0.2989999949932098388671875, 0.58700001239776611328125, 0.114000000059604644775390625)));\n        coloredHighlight = mix(gray, coloredHighlight, vec3(saturationBoost));\n        coloredHighlight = min(coloredHighlight, vec3(1.0));\n    }\n    float luminanceFactor = smoothstep(0.0, 0.60000002384185791015625, luminance);\n    float saturationFactor = smoothstep(0.0, 0.4000000059604644775390625, saturation);\n    float colorInfluence = luminanceFactor * saturationFactor;\n    vec3 whiteHighlight = vec3(targetBrightness);\n    return mix(whiteHighlight, coloredHighlight, vec3(colorInfluence));\n}\n\nvec3 FLT_flutter_local_calculateLighting(vec2 uv, vec3 normal, float sd, float thickness, float height, vec2 lightDirection, float lightIntensity, float ambientStrength, vec3 backgroundColor)\n{\n    float _307;\n    if (thickness > 0.0)\n    {\n        _307 = height / thickness;\n    }\n    else\n    {\n        _307 = 0.0;\n    }\n    float normalizedHeight = _307;\n    float shape = clamp((1.0 - normalizedHeight) * 1.11099994182586669921875, 0.0, 1.0);\n    if (shape < 0.00999999977648258209228515625)\n    {\n        return vec3(0.0);\n    }\n    float thicknessFactor = clamp((thickness - 5.0) * 0.5, 0.0, 1.0);\n    if (thicknessFactor < 0.00999999977648258209228515625)\n    {\n        return vec3(0.0);\n    }\n    float rimWidth = 1.5;\n    float k = 0.88999998569488525390625;\n    float x = sd / rimWidth;\n    float rimFactor = 1.0 / (1.0 + ((k * x) * x));\n    if ((rimFactor < 0.00999999977648258209228515625) || (lightIntensity < 0.00999999977648258209228515625))\n    {\n        return vec3(0.0);\n    }\n    vec2 normalXY = normal.xy;\n    float mainLightInfluence = max(0.0, dot(normalXY, lightDirection));\n    float oppositeLightInfluence = max(0.0, dot(normalXY, -lightDirection));\n    float totalInfluence = mainLightInfluence + (oppositeLightInfluence * 0.800000011920928955078125);\n    vec3 param = backgroundColor;\n    float param_1 = 1.0;\n    vec3 highlightColor = FLT_flutter_local_getHighlightColor(param, param_1);\n    vec3 directionalRim = (((highlightColor * 0.699999988079071044921875) * (totalInfluence * totalInfluence)) * lightIntensity) * 2.0;\n    vec3 ambientRim = (highlightColor * 0.4000000059604644775390625) * ambientStrength;\n    vec3 totalRimLight = (directionalRim + ambientRim) * rimFactor;\n    return (totalRimLight * thicknessFactor) * shape;\n}\n\nvec4 FLT_flutter_local_applyGlassColor(vec4 liquidColor, vec4 glassColor)\n{\n    vec4 finalColor = liquidColor;\n    if (glassColor.w > 0.0)\n    {\n        float glassLuminance = dot(glassColor.xyz, vec3(0.2989999949932098388671875, 0.58700001239776611328125, 0.114000000059604644775390625));\n        if (glassLuminance < 0.5)\n        {\n            vec3 darkened = liquidColor.xyz * (glassColor.xyz * 2.0);\n            vec3 _565 = mix(liquidColor.xyz, darkened, vec3(glassColor.w));\n            finalColor.x = _565.x;\n            finalColor.y = _565.y;\n            finalColor.z = _565.z;\n        }\n        else\n        {\n            vec3 invLiquid = vec3(1.0) - liquidColor.xyz;\n            vec3 invGlass = vec3(1.0) - glassColor.xyz;\n            vec3 screened = vec3(1.0) - (invLiquid * invGlass);\n            vec3 _592 = mix(liquidColor.xyz, screened, vec3(glassColor.w));\n            finalColor.x = _592.x;\n            finalColor.y = _592.y;\n            finalColor.z = _592.z;\n        }\n        finalColor.w = liquidColor.w;\n    }\n    return finalColor;\n}\n\nvec3 FLT_flutter_local_applySaturation(vec3 color, float saturation)\n{\n    float luminance = dot(color, vec3(0.2989999949932098388671875, 0.58700001239776611328125, 0.114000000059604644775390625));\n    vec3 saturatedColor = mix(vec3(luminance), color, vec3(saturation));\n    return clamp(saturatedColor, vec3(0.0), vec3(1.0));\n}\n\nvec4 FLT_flutter_local_renderLiquidGlass(vec2 screenUV, vec2 p, vec2 uSize_1, float sd, float thickness, float refractiveIndex, float chromaticAberration, vec4 glassColor, vec2 lightDirection, float lightIntensity, float ambientStrength, shader backgroundTexture, vec3 normal, float foregroundAlpha, float gaussianBlur, float saturation)\n{\n    float param = sd;\n    float param_1 = thickness;\n    float height = FLT_flutter_local_getHeight(param, param_1);\n    vec2 param_2 = screenUV;\n    vec3 param_3 = normal;\n    float param_4 = height;\n    float param_5 = thickness;\n    float param_6 = refractiveIndex;\n    float param_7 = chromaticAberration;\n    vec2 param_8 = uSize_1;\n    float param_9 = gaussianBlur;\n    vec2 param_10;\n    vec4 _630 = FLT_flutter_local_calculateRefraction(param_2, param_3, param_4, param_5, param_6, param_7, param_8, backgroundTexture, param_9, param_10);\n    vec2 refractionDisplacement = param_10;\n    vec4 refractColor = _630;\n    vec3 backgroundColor = refractColor.xyz;\n    vec2 param_11 = screenUV;\n    vec3 param_12 = normal;\n    float param_13 = sd;\n    float param_14 = thickness;\n    float param_15 = height;\n    vec2 param_16 = lightDirection;\n    float param_17 = lightIntensity;\n    float param_18 = ambientStrength;\n    vec3 param_19 = backgroundColor;\n    vec3 lighting = FLT_flutter_local_calculateLighting(param_11, param_12, param_13, param_14, param_15, param_16, param_17, param_18, param_19);\n    vec4 param_20 = refractColor;\n    vec4 param_21 = glassColor;\n    vec4 finalColor = FLT_flutter_local_applyGlassColor(param_20, param_21);\n    vec4 _662 = finalColor;\n    vec3 _664 = _662.xyz + lighting;\n    finalColor.x = _664.x;\n    finalColor.y = _664.y;\n    finalColor.z = _664.z;\n    vec3 param_22 = finalColor.xyz;\n    float param_23 = saturation;\n    vec3 _676 = FLT_flutter_local_applySaturation(param_22, param_23);\n    finalColor.x = _676.x;\n    finalColor.y = _676.y;\n    finalColor.z = _676.z;\n    return mix(vec4(0.0), finalColor, vec4(foregroundAlpha));\n}\n\nvoid FLT_main()\n{\n    uChromaticAberration = uOpticalProps.y;\n    uLightAngle = uLightConfig.x;\n    uLightIntensity = uLightConfig.y;\n    uAmbientStrength = uLightConfig.z;\n    uThickness = uOpticalProps.z;\n    uRefractiveIndex = uOpticalProps.x;\n    uBlend = uOpticalProps.w;\n    uSaturation = uLightConfig.w;\n    vec2 fragCoord = FLT_flutter_local_FlutterFragCoord();\n    vec2 screenUV_1 = vec2(fragCoord.x / uSize.x, fragCoord.y / uSize.y);\n    vec2 param_24 = fragCoord;\n    int param_25 = int(uNumShapes);\n    float param_26[96] = uShapeData;\n    float param_27 = uBlend;\n    float sd_1 = FLT_flutter_local_sceneSDF(param_24, param_25, param_26, param_27);\n    float foregroundAlpha_1 = 1.0 - smoothstep(-2.0, 0.0, sd_1);\n    if (foregroundAlpha_1 < 0.00999999977648258209228515625)\n    {\n        fragColor = vec4(0.0);\n        return;\n    }\n    float param_28 = sd_1;\n    float param_29 = uThickness;\n    vec3 normal_1 = FLT_flutter_local_getNormal(param_28, param_29);\n    vec2 param_30 = screenUV_1;\n    vec2 param_31 = fragCoord;\n    vec2 param_32 = uSize;\n    float param_33 = sd_1;\n    float param_34 = uThickness;\n    float param_35 = uRefractiveIndex;\n    float param_36 = uChromaticAberration;\n    vec4 param_37 = uGlassColor;\n    vec2 param_38 = uLightDirection;\n    float param_39 = uLightIntensity;\n    float param_40 = uAmbientStrength;\n    vec3 param_41 = normal_1;\n    float param_42 = foregroundAlpha_1;\n    float param_43 = 0.0;\n    float param_44 = uSaturation;\n    fragColor = FLT_flutter_local_renderLiquidGlass(param_30, param_31, param_32, param_33, param_34, param_35, param_36, param_37, param_38, param_39, param_40, uBlurredTexture, param_41, param_42, param_43, param_44);\n}\n\nhalf4 main(float2 iFragCoord)\n{\n      flutter_FragCoord = float4(iFragCoord, 0, 0);\n      FLT_main();\n      return fragColor;\n}\n",
    "stage": 1,
    "uniforms": [
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 0,
        "name": "uSize",
        "rows": 2,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 0,
        "columns": 1,
        "location": 0,
        "name": "uBlurredTexture",
        "rows": 1,
        "type": 12
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 1,
        "name": "uGlassColor",
        "rows": 4,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 2,
        "name": "uOpticalProps",
        "rows": 4,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 3,
        "name": "uLightConfig",
        "rows": 4,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 4,
        "name": "uLightDirection",
        "rows": 2,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 5,
        "name": "uNumShapes",
        "rows": 1,
        "type": 10
      },
      {
        "array_elements": 96,
        "bit_width": 32,
        "columns": 1,
        "location": 6,
        "name": "uShapeData",
        "rows": 1,
        "type": 10
      }
    ]
  }
}