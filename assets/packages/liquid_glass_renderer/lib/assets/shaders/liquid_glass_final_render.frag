{
  "sksl": {
    "entrypoint": "liquid_glass_final_render_fragment_main",
    "shader": "// This SkSL shader is autogenerated by spirv-cross.\n\nfloat4 flutter_FragCoord;\n\nuniform vec2 uSize;\nuniform vec4 uGeometryTextureRect;\nuniform mat4 uGeometryTransform;\nuniform float uDevicePixelRatio;\nuniform vec4 uGlassColor;\nuniform vec3 uOpticalProps;\nuniform vec3 uLightConfig;\nuniform vec2 uLightDirection;\nuniform shader uBackgroundTexture;\nuniform half2 uBackgroundTexture_size;\nuniform shader uGeometryTexture;\nuniform half2 uGeometryTexture_size;\n\nvec4 fragColor;\n\nfloat uRefractiveIndex;\nfloat uChromaticAberration;\nfloat uThickness;\nfloat uLightIntensity;\nfloat uAmbientStrength;\nfloat uSaturation;\n\nvec2 FLT_flutter_local_FlutterFragCoord()\n{\n    return flutter_FragCoord.xy;\n}\n\nvec2 FLT_flutter_local_decodeDisplacement(vec4 encoded, float maxDisplacement)\n{\n    vec2 normalized = encoded.xy;\n    vec2 displacement = ((normalized - vec2(0.5)) * 2.0) * maxDisplacement;\n    return displacement;\n}\n\nvec4 FLT_flutter_local_applyGlassColor(vec4 liquidColor, vec4 glassColor)\n{\n    vec4 finalColor = liquidColor;\n    if (glassColor.w > 0.0)\n    {\n        float glassLuminance = dot(glassColor.xyz, vec3(0.2989999949932098388671875, 0.58700001239776611328125, 0.114000000059604644775390625));\n        if (glassLuminance < 0.5)\n        {\n            vec3 darkened = liquidColor.xyz * (glassColor.xyz * 2.0);\n            vec3 _136 = mix(liquidColor.xyz, darkened, vec3(glassColor.w));\n            finalColor.x = _136.x;\n            finalColor.y = _136.y;\n            finalColor.z = _136.z;\n        }\n        else\n        {\n            vec3 invLiquid = vec3(1.0) - liquidColor.xyz;\n            vec3 invGlass = vec3(1.0) - glassColor.xyz;\n            vec3 screened = vec3(1.0) - (invLiquid * invGlass);\n            vec3 _164 = mix(liquidColor.xyz, screened, vec3(glassColor.w));\n            finalColor.x = _164.x;\n            finalColor.y = _164.y;\n            finalColor.z = _164.z;\n        }\n        finalColor.w = liquidColor.w;\n    }\n    return finalColor;\n}\n\nvec3 FLT_flutter_local_applySaturation(vec3 color, float saturation)\n{\n    float luminance = dot(color, vec3(0.2989999949932098388671875, 0.58700001239776611328125, 0.114000000059604644775390625));\n    vec3 saturatedColor = mix(vec3(luminance), color, vec3(saturation));\n    return clamp(saturatedColor, vec3(0.0), vec3(1.0));\n}\n\nvoid FLT_main()\n{\n    uRefractiveIndex = uOpticalProps.x;\n    uChromaticAberration = uOpticalProps.y;\n    uThickness = uOpticalProps.z;\n    uLightIntensity = uLightConfig.x;\n    uAmbientStrength = uLightConfig.y;\n    uSaturation = uLightConfig.z;\n    vec2 fragCoord = FLT_flutter_local_FlutterFragCoord();\n    vec2 geometryFragCoord = (uGeometryTransform * vec4(fragCoord, 0.0, 1.0)).xy;\n    vec2 screenUV = vec2(fragCoord.x / uSize.x, fragCoord.y / uSize.y);\n    vec2 geometryUv = (geometryFragCoord - uGeometryTextureRect.xy) / uGeometryTextureRect.zw;\n    bool _216 = geometryUv.x < 0.0;\n    bool _223;\n    if (!_216)\n    {\n        _223 = geometryUv.x > 1.0;\n    }\n    else\n    {\n        _223 = _216;\n    }\n    bool _230;\n    if (!_223)\n    {\n        _230 = geometryUv.y < 0.0;\n    }\n    else\n    {\n        _230 = _223;\n    }\n    bool _237;\n    if (!_230)\n    {\n        _237 = geometryUv.y > 1.0;\n    }\n    else\n    {\n        _237 = _230;\n    }\n    if (_237)\n    {\n        fragColor = vec4(0.0);\n        return;\n    }\n    vec4 geometryData = uGeometryTexture.eval(uGeometryTexture_size * ( geometryUv));\n    if (geometryData.w < 0.00999999977648258209228515625)\n    {\n        fragColor = vec4(0.0);\n        return;\n    }\n    float maxDisplacement = uThickness * 10.0;\n    vec4 param = geometryData;\n    float param_1 = maxDisplacement;\n    vec2 displacement = FLT_flutter_local_decodeDisplacement(param, param_1);\n    vec2 invUSize = vec2(1.0) / uSize;\n    vec4 refractColor;\n    if (uChromaticAberration < 0.00999999977648258209228515625)\n    {\n        vec2 refractedUV = screenUV + (displacement * invUSize);\n        refractColor = uBackgroundTexture.eval(uBackgroundTexture_size * ( refractedUV));\n    }\n    else\n    {\n        float dispersionStrength = uChromaticAberration * 0.5;\n        vec2 redOffset = displacement * (1.0 + dispersionStrength);\n        vec2 blueOffset = displacement * (1.0 - dispersionStrength);\n        vec2 redUV = screenUV + (redOffset * invUSize);\n        vec2 greenUV = screenUV + (displacement * invUSize);\n        vec2 blueUV = screenUV + (blueOffset * invUSize);\n        float red = uBackgroundTexture.eval(uBackgroundTexture_size * ( redUV)).x;\n        vec4 greenSample = uBackgroundTexture.eval(uBackgroundTexture_size * ( greenUV));\n        float blue = uBackgroundTexture.eval(uBackgroundTexture_size * ( blueUV)).z;\n        refractColor = vec4(red, greenSample.y, blue, greenSample.w);\n    }\n    vec4 param_2 = refractColor;\n    vec4 param_3 = uGlassColor;\n    vec4 finalColor = FLT_flutter_local_applyGlassColor(param_2, param_3);\n    vec3 param_4 = finalColor.xyz;\n    float param_5 = uSaturation;\n    vec3 _353 = FLT_flutter_local_applySaturation(param_4, param_5);\n    finalColor.x = _353.x;\n    finalColor.y = _353.y;\n    finalColor.z = _353.z;\n    float normalizedHeight = geometryData.z;\n    float edgeFactor = 1.0 - smoothstep(0.0, 0.60000002384185791015625, normalizedHeight);\n    if (edgeFactor > 0.00999999977648258209228515625)\n    {\n        vec2 normalXY = normalize(displacement);\n        float mainLight = max(0.0, dot(normalXY, uLightDirection));\n        float oppositeLight = max(0.0, dot(normalXY, -uLightDirection));\n        float totalInfluence = mainLight + (oppositeLight * 0.800000011920928955078125);\n        float directional = (((totalInfluence * totalInfluence) * uLightIntensity) * 2.0) * 0.699999988079071044921875;\n        float ambient = uAmbientStrength * 0.4000000059604644775390625;\n        float brightness = (directional + ambient) * edgeFactor;\n        vec4 _412 = finalColor;\n        vec3 _416 = mix(_412.xyz, vec3(1.0), vec3(brightness));\n        finalColor.x = _416.x;\n        finalColor.y = _416.y;\n        finalColor.z = _416.z;\n    }\n    float alpha = geometryData.w;\n    fragColor = vec4(finalColor.xyz * alpha, alpha);\n}\n\nhalf4 main(float2 iFragCoord)\n{\n      flutter_FragCoord = float4(iFragCoord, 0, 0);\n      FLT_main();\n      return fragColor;\n}\n",
    "stage": 1,
    "uniforms": [
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 0,
        "name": "uSize",
        "rows": 2,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 0,
        "columns": 1,
        "location": 0,
        "name": "uBackgroundTexture",
        "rows": 1,
        "type": 12
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 1,
        "name": "uGeometryTextureRect",
        "rows": 4,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 0,
        "columns": 1,
        "location": 1,
        "name": "uGeometryTexture",
        "rows": 1,
        "type": 12
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 4,
        "location": 2,
        "name": "uGeometryTransform",
        "rows": 4,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 3,
        "name": "uDevicePixelRatio",
        "rows": 1,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 4,
        "name": "uGlassColor",
        "rows": 4,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 5,
        "name": "uOpticalProps",
        "rows": 3,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 6,
        "name": "uLightConfig",
        "rows": 3,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 7,
        "name": "uLightDirection",
        "rows": 2,
        "type": 10
      }
    ]
  }
}