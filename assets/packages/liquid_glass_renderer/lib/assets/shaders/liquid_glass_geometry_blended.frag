{
  "sksl": {
    "entrypoint": "liquid_glass_geometry_blended_fragment_main",
    "shader": "// This SkSL shader is autogenerated by spirv-cross.\n\nfloat4 flutter_FragCoord;\n\nuniform vec2 uSize;\nuniform vec4 uOpticalProps;\nuniform float uNumShapes;\nuniform float uShapeData[96];\n\nvec4 fragColor;\n\nfloat uThickness;\nfloat uRefractiveIndex;\nfloat uBlend;\n\nvec2 FLT_flutter_local_FlutterFragCoord()\n{\n    return flutter_FragCoord.xy;\n}\n\nfloat FLT_flutter_local_sdfSquircle(vec2 p, vec2 b, inout float r)\n{\n    float shortest = min(b.x, b.y);\n    r = min(r, shortest);\n    vec2 q = (abs(p) - b) + vec2(r);\n    vec2 maxQ = max(q, vec2(0.0));\n    return (min(max(q.x, q.y), 0.0) + sqrt((maxQ.x * maxQ.x) + (maxQ.y * maxQ.y))) - r;\n}\n\nfloat FLT_flutter_local_sdfEllipse(vec2 p, inout vec2 r)\n{\n    r = max(r, vec2(9.9999997473787516355514526367188e-05));\n    vec2 invR = vec2(1.0) / r;\n    vec2 invR2 = invR * invR;\n    vec2 pInvR = p * invR;\n    float k1 = length(pInvR);\n    vec2 pInvR2 = p * invR2;\n    float k2 = length(pInvR2);\n    return (k1 * (k1 - 1.0)) / max(k2, 9.9999997473787516355514526367188e-05);\n}\n\nfloat FLT_flutter_local_sdfRRect(vec2 p, vec2 b, inout float r)\n{\n    float shortest = min(b.x, b.y);\n    r = min(r, shortest);\n    vec2 q = (abs(p) - b) + vec2(r);\n    return (min(max(q.x, q.y), 0.0) + length(max(q, vec2(0.0)))) - r;\n}\n\nfloat FLT_flutter_local_getShapeSDF(float type, vec2 p, vec2 center, vec2 size, float r)\n{\n    if (type == 1.0)\n    {\n        vec2 param = p - center;\n        vec2 param_1 = size / vec2(2.0);\n        float param_2 = r;\n        float _256 = FLT_flutter_local_sdfSquircle(param, param_1, param_2);\n        return _256;\n    }\n    if (type == 2.0)\n    {\n        vec2 param_3 = p - center;\n        vec2 param_4 = size / vec2(2.0);\n        float _270 = FLT_flutter_local_sdfEllipse(param_3, param_4);\n        return _270;\n    }\n    if (type == 3.0)\n    {\n        vec2 param_5 = p - center;\n        vec2 param_6 = size / vec2(2.0);\n        float param_7 = r;\n        float _287 = FLT_flutter_local_sdfRRect(param_5, param_6, param_7);\n        return _287;\n    }\n    return 1000000000.0;\n}\n\nfloat FLT_flutter_local_getShapeSDFFromArray(int index, vec2 p, float shapeData[96])\n{\n    int baseIndex = index * 6;\n    float type = shapeData[baseIndex];\n    vec2 center = vec2(shapeData[baseIndex + 1], shapeData[baseIndex + 2]);\n    vec2 size = vec2(shapeData[baseIndex + 3], shapeData[baseIndex + 4]);\n    float cornerRadius = shapeData[baseIndex + 5];\n    float param = type;\n    vec2 param_1 = p;\n    vec2 param_2 = center;\n    vec2 param_3 = size;\n    float param_4 = cornerRadius;\n    return FLT_flutter_local_getShapeSDF(param, param_1, param_2, param_3, param_4);\n}\n\nfloat FLT_flutter_local_smoothUnion(float d1, float d2, float k)\n{\n    if (k <= 0.0)\n    {\n        return min(d1, d2);\n    }\n    float e = max(k - abs(d1 - d2), 0.0);\n    return min(d1, d2) - (((e * e) * 0.25) / k);\n}\n\nfloat FLT_flutter_local_sceneSDF(vec2 p, int numShapes, float shapeData[96], float blend)\n{\n    if (numShapes == 0)\n    {\n        return 1000000000.0;\n    }\n    int param = 0;\n    vec2 param_1 = p;\n    float param_2[96] = shapeData;\n    float result = FLT_flutter_local_getShapeSDFFromArray(param, param_1, param_2);\n    if (numShapes <= 4)\n    {\n        if (numShapes >= 2)\n        {\n            int param_3 = 1;\n            vec2 param_4 = p;\n            float param_5[96] = shapeData;\n            float shapeSDF = FLT_flutter_local_getShapeSDFFromArray(param_3, param_4, param_5);\n            float param_6 = result;\n            float param_7 = shapeSDF;\n            float param_8 = blend;\n            result = FLT_flutter_local_smoothUnion(param_6, param_7, param_8);\n        }\n        if (numShapes >= 3)\n        {\n            int param_9 = 2;\n            vec2 param_10 = p;\n            float param_11[96] = shapeData;\n            float shapeSDF_1 = FLT_flutter_local_getShapeSDFFromArray(param_9, param_10, param_11);\n            float param_12 = result;\n            float param_13 = shapeSDF_1;\n            float param_14 = blend;\n            result = FLT_flutter_local_smoothUnion(param_12, param_13, param_14);\n        }\n        if (numShapes >= 4)\n        {\n            int param_15 = 3;\n            vec2 param_16 = p;\n            float param_17[96] = shapeData;\n            float shapeSDF_2 = FLT_flutter_local_getShapeSDFFromArray(param_15, param_16, param_17);\n            float param_18 = result;\n            float param_19 = shapeSDF_2;\n            float param_20 = blend;\n            result = FLT_flutter_local_smoothUnion(param_18, param_19, param_20);\n        }\n    }\n    else\n    {\n        for (int i = 1; i < min(numShapes, 16); i++)\n        {\n            int param_21 = i;\n            vec2 param_22 = p;\n            float param_23[96] = shapeData;\n            float shapeSDF_3 = FLT_flutter_local_getShapeSDFFromArray(param_21, param_22, param_23);\n            float param_24 = result;\n            float param_25 = shapeSDF_3;\n            float param_26 = blend;\n            result = FLT_flutter_local_smoothUnion(param_24, param_25, param_26);\n        }\n    }\n    return result;\n}\n\nvec4 FLT_flutter_local_encodeDisplacementData(vec2 displacement, float maxDisplacement, float height, float thickness, float alpha)\n{\n    vec2 normalizedDisp = ((displacement / vec2(maxDisplacement)) * 0.5) + vec2(0.5);\n    normalizedDisp = clamp(normalizedDisp, vec2(0.0), vec2(1.0));\n    float _462;\n    if (thickness > 0.0)\n    {\n        _462 = clamp(height / thickness, 0.0, 1.0);\n    }\n    else\n    {\n        _462 = 0.0;\n    }\n    float normalizedHeight = _462;\n    return vec4(normalizedDisp.x, normalizedDisp.y, normalizedHeight, alpha);\n}\n\nvoid FLT_main()\n{\n    uThickness = uOpticalProps.z;\n    uRefractiveIndex = uOpticalProps.x;\n    uBlend = uOpticalProps.w;\n    vec2 fragCoord = FLT_flutter_local_FlutterFragCoord();\n    vec2 screenUV = vec2(fragCoord.x / uSize.x, fragCoord.y / uSize.y);\n    vec2 param = fragCoord;\n    int param_1 = int(uNumShapes);\n    float param_2[96] = uShapeData;\n    float param_3 = uBlend;\n    float sd = FLT_flutter_local_sceneSDF(param, param_1, param_2, param_3);\n    float foregroundAlpha = 1.0 - smoothstep(-2.0, 0.0, sd);\n    if (foregroundAlpha < 0.00999999977648258209228515625)\n    {\n        fragColor = vec4(0.0);\n        return;\n    }\n    float dx = dFdx(sd);\n    float dy = dFdy(sd);\n    float n_cos = max(uThickness + sd, 0.0) / uThickness;\n    float n_sin = sqrt(max(0.0, 1.0 - (n_cos * n_cos)));\n    vec3 normal = normalize(vec3(dx * n_cos, dy * n_cos, n_sin));\n    if ((sd >= 0.0) || (uThickness <= 0.0))\n    {\n        fragColor = vec4(0.0);\n        return;\n    }\n    float x = uThickness + sd;\n    float sqrtTerm = sqrt(max(0.0, (uThickness * uThickness) - (x * x)));\n    float height_1 = mix(sqrtTerm, uThickness, float(sd < (-uThickness)));\n    float baseHeight = uThickness * 8.0;\n    vec3 incident = vec3(0.0, 0.0, -1.0);\n    float invRefractiveIndex = 1.0 / uRefractiveIndex;\n    vec3 baseRefract = refract(incident, normal, invRefractiveIndex);\n    float baseRefractLength = (height_1 + baseHeight) / max(0.001000000047497451305389404296875, abs(baseRefract.z));\n    vec2 displacement_1 = baseRefract.xy * baseRefractLength;\n    float maxDisplacement_1 = uThickness * 10.0;\n    vec2 param_4 = displacement_1;\n    float param_5 = maxDisplacement_1;\n    float param_6 = height_1;\n    float param_7 = uThickness;\n    float param_8 = foregroundAlpha;\n    fragColor = FLT_flutter_local_encodeDisplacementData(param_4, param_5, param_6, param_7, param_8);\n}\n\nhalf4 main(float2 iFragCoord)\n{\n      flutter_FragCoord = float4(iFragCoord, 0, 0);\n      FLT_main();\n      return fragColor;\n}\n",
    "stage": 1,
    "uniforms": [
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 0,
        "name": "uSize",
        "rows": 2,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 1,
        "name": "uOpticalProps",
        "rows": 4,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 2,
        "name": "uNumShapes",
        "rows": 1,
        "type": 10
      },
      {
        "array_elements": 96,
        "bit_width": 32,
        "columns": 1,
        "location": 3,
        "name": "uShapeData",
        "rows": 1,
        "type": 10
      }
    ]
  }
}